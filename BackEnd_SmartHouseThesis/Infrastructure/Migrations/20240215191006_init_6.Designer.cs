// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240215191006_init_6")]
    partial class init_6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DevicePackage", b =>
                {
                    b.Property<Guid>("DevicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevicesId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("DevicePackage");
                });

            modelBuilder.Entity("Domain.Entities.Acceptance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartWarranty")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6bea73d-e8c1-48f5-b5ea-121483fe9dd9"),
                            Address = "Owner Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4825),
                            Email = "Owner@gmail.com",
                            FirstName = "Owner",
                            LastName = "Account",
                            Password = "owner",
                            RoleId = new Guid("7e368f4f-efc9-4573-8306-a3f5f794014e")
                        },
                        new
                        {
                            Id = new Guid("10db3db8-194f-4433-8c52-9c4500ea4617"),
                            Address = "Teller Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4839),
                            Email = "Teller@gmail.com",
                            FirstName = "Teller",
                            LastName = "Account",
                            Password = "teller",
                            RoleId = new Guid("62fe4e6c-de9c-4877-97af-8ddce2248534")
                        },
                        new
                        {
                            Id = new Guid("e34f837c-832e-4974-97ae-32a4a5518922"),
                            Address = "Customer Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4841),
                            Email = "Customer@gmail.com",
                            FirstName = "Customer",
                            LastName = "Account",
                            Password = "customer",
                            RoleId = new Guid("26c6632a-19cb-4805-82a8-a4a31eef93ed")
                        },
                        new
                        {
                            Id = new Guid("2f4da093-b0bd-45fe-ab10-2b79d79264c2"),
                            Address = "Staff Lead Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4843),
                            Email = "StaffLead@gmail.com",
                            FirstName = "Staff Lead",
                            LastName = "Account",
                            Password = "stafflead",
                            RoleId = new Guid("ab8b0c69-016b-48f0-9e0b-ed9b0e1191b3")
                        },
                        new
                        {
                            Id = new Guid("8970c626-87fa-411e-85e3-2cec17626700"),
                            Address = "Staff 1 Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4888),
                            Email = "Staff1@gmail.com",
                            FirstName = "Staff 1",
                            LastName = "Account",
                            Password = "staff1",
                            RoleId = new Guid("ab8b0c69-016b-48f0-9e0b-ed9b0e1191b3")
                        },
                        new
                        {
                            Id = new Guid("74fb9e53-e64c-44b7-84ee-91bdc8420e3f"),
                            Address = "Staff 2 Address",
                            CreationDate = new DateTime(2024, 2, 16, 2, 10, 5, 388, DateTimeKind.Local).AddTicks(4890),
                            Email = "Staff2@gmail.com",
                            FirstName = "Staff 2",
                            LastName = "Account",
                            Password = "staff2",
                            RoleId = new Guid("ab8b0c69-016b-48f0-9e0b-ed9b0e1191b3")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Logchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TellerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndPlanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RevenueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartPlanDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RevenueId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TellerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e34f837c-832e-4974-97ae-32a4a5518922")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09a09922-024e-486b-bb1c-de9ca7af7a8e"),
                            Description = "Nếu là tín đồ của các thiết bị ngôi nhà thông minh Xiaomi thì bộ điều khiển trung tâm Homekit Xiaomi Gateway V3 sẽ là lựa chọn mà bạn không thể bỏ qua. Thiết bị giúp bạn có thể điều khiển các thiết bị trong bộ Homekit với kết nối ổn định, nhanh chóng và đặc biệt là bảo mật quyền riêng tư tốt.",
                            DeviceName = "Xiaomi Smart Home Gateway",
                            DeviceType = "Gateway",
                            ManufacturerId = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Price = 800000m
                        },
                        new
                        {
                            Id = new Guid("91f3c1b6-c4b4-4061-81b5-ff4fd8089c8c"),
                            Description = "thiết bị giúp theo dõi và thông báo trạng thái đóng, mở cửa cho ngôi nhà của bạn một cách nhanh chóng và chính xác theo thời gian thực. Sản phẩm là một thiết bị không thể bỏ qua nếu người dùng mong muốn xây dựng nhà thông minh.",
                            DeviceName = "Cảm biến gắn cửa Xiaomi 2 MCCGQ02HL",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Price = 180000m
                        },
                        new
                        {
                            Id = new Guid("917df600-c9a0-49d9-b176-6553e7b491f0"),
                            Description = "Nếu gia đình bạn thường xuyên có khách đến thăm hoặc để tránh trường hợp những tên trộm có thủ thuật tinh vi để xâm nhập vào nhà bạn thì việc trang bị Chuông cửa thông minh Xiaomi Linptech G6L-Wifi-SW sẽ là sự bảo vệ hợp lý và hiệu quả nhất.",
                            DeviceName = "Chuông cửa thông minh Xiaomi Linptech G6L-Wifi-SW",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Price = 399000m
                        },
                        new
                        {
                            Id = new Guid("fdda5c07-adad-4b17-8312-339c436d7936"),
                            Description = "Thiết bị được kết nối qua ứng dụng Mi Home, có thế sử dụng với các thiết bị khác. Một trong những tính năng tôi ưu nhất là điều khiển chức năng của phích cắm tắt/bật từ xa.\r\n\r\nBạn cũng có thể đặt hẹn giờ tắt/bật cho từng ổ cắm. Điều này giúp cho bạn thuận tiện hơn trong khi sử dụng các sản phẩm không phải đồ thông minh khác mà muốn điều khiển từ xa.",
                            DeviceName = "Ổ cắm thông minh – Zigbee",
                            DeviceType = "Electronic",
                            ManufacturerId = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Price = 255000m
                        },
                        new
                        {
                            Id = new Guid("ed1f20c6-289b-4e58-bef8-ab65e7338b31"),
                            Description = "Xiaomi gen 2 RTCGQ02LM phiên bản cảm biến chuyển động thế hệ mới mà người dùng nhà thông minh của Xiaomi không thể bỏ qua. Thiết bị giúp phát hiện chuyển động con người, vật nuôi, ánh sáng,...có độ chính xác cao đồng thời cũng được hỗ trợ liên kết với nhiều thiết bị nhà thông minh khác.",
                            DeviceName = "Cảm biến người, chuyển động Xiaomi gen 2 RTCGQ02LM",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Price = 290000m
                        },
                        new
                        {
                            Id = new Guid("040f7b39-7ae4-44a7-8e5a-9c806f937eca"),
                            Description = "Thiết bị điều khiển trung tâm SH-HC là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "THIẾT BỊ ĐIỀU KHIỂN TRUNG TÂM SH-HC",
                            DeviceType = "Gateway",
                            ManufacturerId = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Price = 18000000m
                        },
                        new
                        {
                            Id = new Guid("fd94fac6-d57c-4bda-926d-bb4ce2e7b290"),
                            Description = "Công tắc Công tắc cảm ứng 6 kênh SH-CC6-Lite là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "Công tắc cảm ứng 6 kênh SH-CC6",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Price = 12500000m
                        },
                        new
                        {
                            Id = new Guid("91cc3ef2-f4e2-4262-ab22-0261fce93640"),
                            Description = "Công tắc 4 kênh SH-CT4Z-LITE là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "Công tắc 4 kênh SH-CT4Z-T2",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Price = 4950000m
                        },
                        new
                        {
                            Id = new Guid("5972e2cb-40f6-4d33-8b39-40d5ec836f53"),
                            Description = "Thiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury là thiết bị an ninh được sử dụng trong hệ thống nhà thông minh SmartHome, có chức năng thu thập tín hiệu từ các cảm biến an ninh như: hàng rào điện tử, cảm biến vị trí, cảm biến kính vỡ, cảm biến báo khói...\r\n\r\nThiết bị được kết nối với hệ thống thông qua mạng truyền thông không dây ZigBee. Tín hiệu an ninh sau khi thu thập, sẽ được thiết bị chuyển đến hệ thống Server SmartHome để sử lý.\r\n\r\nThiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury hỗ trợ 4 kênh thu thập tín hiệu điểm NC/NO, còi báo động và cung cấp nguồn ra 12VDC-1A cho các cảm biến.",
                            DeviceName = "Thiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Price = 70000000m
                        },
                        new
                        {
                            Id = new Guid("bd8e9511-cb36-4bd1-b8d9-637612c67500"),
                            Description = "Thiết bị SH-CT1Z-T2-PRO là công tắc cảm ứng 1 kênh được sử dụng trong hệ thống nhà thông minh SmartHome, hỗ trợ điều khiển 1 kênh để điều khiển các thiết bị điện.",
                            DeviceName = "Công tắc 1 kênh SH-CT1Z-T2",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Price = 4650000m
                        },
                        new
                        {
                            Id = new Guid("e3fddf74-41de-47ac-a63c-f761f8941e32"),
                            Description = "Google Nest Yale là sản phẩm khóa cửa thông minh của Google Nest và Yale. Sản phẩm thuộc công ty khóa hàng đầu thế giới – Yale. Là một trong những thương hiệu quốc tế lâu đời nhất. Yale là một trong những tên tuổi nổi tiếng và được kính trọng nhất trong ngành công nghiệp khóa. Công ty là một phần đáng tự hào của Habitat for Humanity. Đã cung cấp hơn 700.000 ổ khóa cho các ngôi nhà của Habitat for Humanity. Yale là một phần của Tập đoàn ASSA ABLOY, công ty hàng đầu thế giới về các giải pháp mở cửa.",
                            DeviceName = "Khóa thông minh Google Nest x Yale Smart Lock",
                            DeviceType = "Sercurity",
                            ManufacturerId = new Guid("5986ec27-d9df-4923-80e7-15a6e3a69b9d"),
                            Price = 6990000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Manufacturer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327ae126-2a8a-43a4-9f08-27c174097294"),
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = new Guid("5986ec27-d9df-4923-80e7-15a6e3a69b9d"),
                            Name = "Google"
                        },
                        new
                        {
                            Id = new Guid("8f8d8964-fc29-4abd-ba6e-fcea10a05412"),
                            Name = "Nest "
                        },
                        new
                        {
                            Id = new Guid("bddf66ef-bd82-4783-82c0-82a59f2e9fcc"),
                            Name = "Philip"
                        },
                        new
                        {
                            Id = new Guid("37ddf51c-c7ce-4226-bd08-798399edbd1f"),
                            Name = "LG"
                        },
                        new
                        {
                            Id = new Guid("304ee430-abf3-481a-b5f8-a7c8f2b207fe"),
                            Name = "Philip"
                        },
                        new
                        {
                            Id = new Guid("537c5b9f-60bb-43fd-afce-5e76e47e49d9"),
                            Name = "BKAV"
                        },
                        new
                        {
                            Id = new Guid("3c3a0560-aae1-40c0-8167-71071beb7bf3"),
                            Name = "Vsmart"
                        },
                        new
                        {
                            Id = new Guid("07a9ae29-3f85-45f5-a3f4-554786edeadb"),
                            Name = "Javis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConstructEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConstructStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StaffId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6bea73d-e8c1-48f5-b5ea-121483fe9dd9")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("927c54bd-9b22-4fb7-8b5d-c4c94edd4ec6"),
                            Description = "Mi Home hỗ trợ rất nhiều thiết bị nhà thông minh như: camera, máy lọc không khí, quạt điện, robot hút bụi … được kết nối và điều khiển qua ứng dụng.\r\n\r\nTùy vào từng hoàn cảnh mà người dùng có thể dễ dàng điều khiển tự động như: đèn sáng, quạt quay, robot hoạt động … Điều này giúp bạn không cần phải tự động phải ở gần thiết bị mới làm được.\r\n\r\nHiểu được điều này, Xiaomi đã cho ra mắt bộ thiết bị nhà thông mình Xiaomi Smart Home Security Kit 5 Trong 1. Sản phẩm bao gồm:\r\n\r\nBộ điều khiển trung tâm;\r\nCảm biến chuyển động;\r\nCảm biến đóng / mở cửa;\r\nChuông cửa;\r\nỔ cắm thông minh.",
                            PackageName = "Bộ Thiết Bị Nhà Thông Minh Xiaomi Smart Home Security Kit 5 Trong 1",
                            Price = 1490000m
                        },
                        new
                        {
                            Id = new Guid("a59f4d3c-0a89-47a4-9873-602c2f8af06e"),
                            Description = "",
                            PackageName = "Gói Sản Phẩm Nhà thông Minh BKAV",
                            Price = 105000000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isDeposit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SurveyId")
                        .IsUnique()
                        .HasFilter("[SurveyId] IS NOT NULL");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TotalConstract")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e368f4f-efc9-4573-8306-a3f5f794014e"),
                            RoleName = "Owner"
                        },
                        new
                        {
                            Id = new Guid("ab8b0c69-016b-48f0-9e0b-ed9b0e1191b3"),
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("62fe4e6c-de9c-4877-97af-8ddce2248534"),
                            RoleName = "Teller"
                        },
                        new
                        {
                            Id = new Guid("26c6632a-19cb-4805-82a8-a4a31eef93ed"),
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isLeader")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f4da093-b0bd-45fe-ab10-2b79d79264c2")
                        },
                        new
                        {
                            Id = new Guid("8970c626-87fa-411e-85e3-2cec17626700")
                        },
                        new
                        {
                            Id = new Guid("74fb9e53-e64c-44b7-84ee-91bdc8420e3f")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecommendPacket")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("RoomArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Tellers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10db3db8-194f-4433-8c52-9c4500ea4617")
                        });
                });

            modelBuilder.Entity("DevicePackage", b =>
                {
                    b.HasOne("Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Acceptance", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithOne("Acceptance")
                        .HasForeignKey("Domain.Entities.Acceptance", "ContractId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Acceptances")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Contract");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Chat", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Chats")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Teller", "Teller")
                        .WithMany("Chats")
                        .HasForeignKey("TellerId");

                    b.Navigation("Customer");

                    b.Navigation("Teller");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Revenue", "Revenue")
                        .WithMany("Contracts")
                        .HasForeignKey("RevenueId");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Contracts")
                        .HasForeignKey("StaffId");

                    b.HasOne("Domain.Entities.Teller", "Teller")
                        .WithMany("Contracts")
                        .HasForeignKey("TellerId");

                    b.Navigation("Customer");

                    b.Navigation("Revenue");

                    b.Navigation("Staff");

                    b.Navigation("Teller");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Devices")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Devices")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Devices")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Manufacturer");

                    b.Navigation("Order");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PackageId");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany("Images")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.Image", "PackageId");

                    b.Navigation("Device");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Manufacturer")
                        .HasForeignKey("Domain.Entities.Manufacturer", "PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Domain.Entities.OrderDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("Domain.Entities.Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Packages")
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Packages")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("Packages")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Contract");

                    b.Navigation("Owner");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Contract");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Policy", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Policies")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Policy")
                        .HasForeignKey("Domain.Entities.Policy", "PackageId");

                    b.Navigation("Owner");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Promotions")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithOne("Request")
                        .HasForeignKey("Domain.Entities.Request", "SurveyId");

                    b.Navigation("Customer");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Revenues")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entities.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Surveys")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Teller")
                        .HasForeignKey("Domain.Entities.Teller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Account");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Teller")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Acceptance")
                        .IsRequired();

                    b.Navigation("Packages");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Acceptances");

                    b.Navigation("Chats");

                    b.Navigation("Contracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Packages");

                    b.Navigation("Policies");

                    b.Navigation("Promotions");

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Manufacturer")
                        .IsRequired();

                    b.Navigation("Policy")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Orders");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
