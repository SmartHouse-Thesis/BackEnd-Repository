// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240128092842_init_5")]
    partial class init_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DevicePackage", b =>
                {
                    b.Property<Guid>("DevicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevicesId", "PackagesId");

                    b.HasIndex("PackagesId");

                    b.ToTable("DevicePackage");
                });

            modelBuilder.Entity("Domain.Entities.Acceptance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartWarranty")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.ToTable("Acceptances");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e84f2b9-88c6-4bde-9e8b-f1135be77ba0"),
                            Address = "Owner Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(439),
                            Email = "Owner@gmail.com",
                            FirstName = "Owner",
                            LastName = "Account",
                            Password = "owner",
                            RoleId = new Guid("acdbcba2-c11e-474a-9084-74b264ed734f")
                        },
                        new
                        {
                            Id = new Guid("6c798e61-414b-468e-b9fb-79b16dc6b643"),
                            Address = "Teller Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(452),
                            Email = "Teller@gmail.com",
                            FirstName = "Teller",
                            LastName = "Account",
                            Password = "teller",
                            RoleId = new Guid("2fa5da1a-8f00-4c40-81de-c6dad46509a6")
                        },
                        new
                        {
                            Id = new Guid("05bc08ba-aa15-4593-a8c3-2b4f10bf208d"),
                            Address = "Customer Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(495),
                            Email = "Customer@gmail.com",
                            FirstName = "Customer",
                            LastName = "Account",
                            Password = "customer",
                            RoleId = new Guid("a1c91713-12bb-4cc6-bedd-32c35c0fd939")
                        },
                        new
                        {
                            Id = new Guid("8e17c5e1-2cfa-4018-b840-8ec9753ac14a"),
                            Address = "Staff Lead Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(497),
                            Email = "StaffLead@gmail.com",
                            FirstName = "Staff Lead",
                            LastName = "Account",
                            Password = "stafflead",
                            RoleId = new Guid("0eb86888-54f4-4ec1-8b7f-6e4efcf0f421")
                        },
                        new
                        {
                            Id = new Guid("8856a279-7edb-4b31-bd1e-1828fcd39201"),
                            Address = "Staff 1 Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(499),
                            Email = "Staff1@gmail.com",
                            FirstName = "Staff 1",
                            LastName = "Account",
                            Password = "staff1",
                            RoleId = new Guid("0eb86888-54f4-4ec1-8b7f-6e4efcf0f421")
                        },
                        new
                        {
                            Id = new Guid("abac982f-2a54-4a79-8166-ec6ab33b7118"),
                            Address = "Staff 2 Address",
                            CreationDate = new DateTime(2024, 1, 28, 16, 28, 41, 576, DateTimeKind.Local).AddTicks(500),
                            Email = "Staff2@gmail.com",
                            FirstName = "Staff 2",
                            LastName = "Account",
                            Password = "staff2",
                            RoleId = new Guid("0eb86888-54f4-4ec1-8b7f-6e4efcf0f421")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Logchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TellerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndPlanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RevenueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartPlanDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RevenueId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TellerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05bc08ba-aa15-4593-a8c3-2b4f10bf208d")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6575b505-8b16-46a1-a9cc-de1a9374a7ac"),
                            Description = "Nếu là tín đồ của các thiết bị ngôi nhà thông minh Xiaomi thì bộ điều khiển trung tâm Homekit Xiaomi Gateway V3 sẽ là lựa chọn mà bạn không thể bỏ qua. Thiết bị giúp bạn có thể điều khiển các thiết bị trong bộ Homekit với kết nối ổn định, nhanh chóng và đặc biệt là bảo mật quyền riêng tư tốt.",
                            DeviceName = "Xiaomi Smart Home Gateway",
                            DeviceType = "Gateway",
                            ManufacturerId = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Price = 800000m
                        },
                        new
                        {
                            Id = new Guid("cf15ffd2-b0c0-4c48-810e-fd8f2186dcc5"),
                            Description = "thiết bị giúp theo dõi và thông báo trạng thái đóng, mở cửa cho ngôi nhà của bạn một cách nhanh chóng và chính xác theo thời gian thực. Sản phẩm là một thiết bị không thể bỏ qua nếu người dùng mong muốn xây dựng nhà thông minh.",
                            DeviceName = "Cảm biến gắn cửa Xiaomi 2 MCCGQ02HL",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Price = 180000m
                        },
                        new
                        {
                            Id = new Guid("6a120e3b-10fd-44bc-bee9-6aaad937c895"),
                            Description = "Nếu gia đình bạn thường xuyên có khách đến thăm hoặc để tránh trường hợp những tên trộm có thủ thuật tinh vi để xâm nhập vào nhà bạn thì việc trang bị Chuông cửa thông minh Xiaomi Linptech G6L-Wifi-SW sẽ là sự bảo vệ hợp lý và hiệu quả nhất.",
                            DeviceName = "Chuông cửa thông minh Xiaomi Linptech G6L-Wifi-SW",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Price = 399000m
                        },
                        new
                        {
                            Id = new Guid("24241f54-4f90-4fe6-8525-099e8ae0c03e"),
                            Description = "Thiết bị được kết nối qua ứng dụng Mi Home, có thế sử dụng với các thiết bị khác. Một trong những tính năng tôi ưu nhất là điều khiển chức năng của phích cắm tắt/bật từ xa.\r\n\r\nBạn cũng có thể đặt hẹn giờ tắt/bật cho từng ổ cắm. Điều này giúp cho bạn thuận tiện hơn trong khi sử dụng các sản phẩm không phải đồ thông minh khác mà muốn điều khiển từ xa.",
                            DeviceName = "Ổ cắm thông minh – Zigbee",
                            DeviceType = "Electronic",
                            ManufacturerId = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Price = 255000m
                        },
                        new
                        {
                            Id = new Guid("23fe2562-c774-461b-83fb-5dfe84168ba4"),
                            Description = "Xiaomi gen 2 RTCGQ02LM phiên bản cảm biến chuyển động thế hệ mới mà người dùng nhà thông minh của Xiaomi không thể bỏ qua. Thiết bị giúp phát hiện chuyển động con người, vật nuôi, ánh sáng,...có độ chính xác cao đồng thời cũng được hỗ trợ liên kết với nhiều thiết bị nhà thông minh khác.",
                            DeviceName = "Cảm biến người, chuyển động Xiaomi gen 2 RTCGQ02LM",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Price = 290000m
                        },
                        new
                        {
                            Id = new Guid("fcca07db-9a24-4393-bcf9-9fc046efe459"),
                            Description = "Thiết bị điều khiển trung tâm SH-HC là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "THIẾT BỊ ĐIỀU KHIỂN TRUNG TÂM SH-HC",
                            DeviceType = "Gateway",
                            ManufacturerId = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Price = 18000000m
                        },
                        new
                        {
                            Id = new Guid("7a68ff8b-45c7-496b-bc2a-d74a7809a470"),
                            Description = "Công tắc Công tắc cảm ứng 6 kênh SH-CC6-Lite là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "Công tắc cảm ứng 6 kênh SH-CC6",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Price = 12500000m
                        },
                        new
                        {
                            Id = new Guid("15927d8a-a545-4dd9-bf75-30aac9dd0f7b"),
                            Description = "Công tắc 4 kênh SH-CT4Z-LITE là sản phẩm của nhà thông minh Bkav SmartHome, sản xuất tại Việt Nam với linh kiện cốt lõi nhập khẩu từ Châu Âu như: Qualcomm, Microchip, Osram...và kính cường lực chống xước Gorilla Glass - Nhật Bản (loại kính dùng cho điện thoại thông minh cao cấp). Giao diện điều khiển 3D trạng thái.",
                            DeviceName = "Công tắc 4 kênh SH-CT4Z-T2",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Price = 4950000m
                        },
                        new
                        {
                            Id = new Guid("b8a5a1f5-a10f-4aea-98b9-35e7320bcf13"),
                            Description = "Thiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury là thiết bị an ninh được sử dụng trong hệ thống nhà thông minh SmartHome, có chức năng thu thập tín hiệu từ các cảm biến an ninh như: hàng rào điện tử, cảm biến vị trí, cảm biến kính vỡ, cảm biến báo khói...\r\n\r\nThiết bị được kết nối với hệ thống thông qua mạng truyền thông không dây ZigBee. Tín hiệu an ninh sau khi thu thập, sẽ được thiết bị chuyển đến hệ thống Server SmartHome để sử lý.\r\n\r\nThiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury hỗ trợ 4 kênh thu thập tín hiệu điểm NC/NO, còi báo động và cung cấp nguồn ra 12VDC-1A cho các cảm biến.",
                            DeviceName = "Thiết bị kiểm soát an ninh SH-SCZ-Pro bản Luxury",
                            DeviceType = "Sensor",
                            ManufacturerId = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Price = 70000000m
                        },
                        new
                        {
                            Id = new Guid("30be0bf3-561e-4031-a885-5399c00aa935"),
                            Description = "Thiết bị SH-CT1Z-T2-PRO là công tắc cảm ứng 1 kênh được sử dụng trong hệ thống nhà thông minh SmartHome, hỗ trợ điều khiển 1 kênh để điều khiển các thiết bị điện.",
                            DeviceName = "Công tắc 1 kênh SH-CT1Z-T2",
                            DeviceType = "Switch",
                            ManufacturerId = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Price = 4650000m
                        },
                        new
                        {
                            Id = new Guid("b0b59a38-2c5d-4bef-a596-62ade860f0a5"),
                            Description = "Google Nest Yale là sản phẩm khóa cửa thông minh của Google Nest và Yale. Sản phẩm thuộc công ty khóa hàng đầu thế giới – Yale. Là một trong những thương hiệu quốc tế lâu đời nhất. Yale là một trong những tên tuổi nổi tiếng và được kính trọng nhất trong ngành công nghiệp khóa. Công ty là một phần đáng tự hào của Habitat for Humanity. Đã cung cấp hơn 700.000 ổ khóa cho các ngôi nhà của Habitat for Humanity. Yale là một phần của Tập đoàn ASSA ABLOY, công ty hàng đầu thế giới về các giải pháp mở cửa.",
                            DeviceName = "Khóa thông minh Google Nest x Yale Smart Lock",
                            DeviceType = "Sercurity",
                            ManufacturerId = new Guid("81f53fc6-5418-4ec3-abbb-abf6f5a6f7ea"),
                            Price = 6990000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Manufacturer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("890c62e4-9de1-47bf-9d69-59f28992e6ae"),
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = new Guid("81f53fc6-5418-4ec3-abbb-abf6f5a6f7ea"),
                            Name = "Google"
                        },
                        new
                        {
                            Id = new Guid("9c4206ac-d3e9-4f50-bd7f-806567121a98"),
                            Name = "Nest "
                        },
                        new
                        {
                            Id = new Guid("fa706086-2d25-4448-b79f-91b871f2d374"),
                            Name = "Philip"
                        },
                        new
                        {
                            Id = new Guid("35b04309-1769-4284-9505-05a4e86d4773"),
                            Name = "LG"
                        },
                        new
                        {
                            Id = new Guid("89e51956-bfbe-4167-9539-c510c71b9c44"),
                            Name = "Philip"
                        },
                        new
                        {
                            Id = new Guid("3ca3764b-5442-45e1-8b1f-7d5ad7cd5e3d"),
                            Name = "BKAV"
                        },
                        new
                        {
                            Id = new Guid("52c89c30-ece4-4922-a7cc-070c2d9272bc"),
                            Name = "Vsmart"
                        },
                        new
                        {
                            Id = new Guid("6e70c21f-9620-41c2-87ec-1ad50fbb1a3e"),
                            Name = "Javis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConstructEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConstructStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StaffId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e84f2b9-88c6-4bde-9e8b-f1135be77ba0")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba5c5a29-e48d-40dd-a289-c1fc7e3e6721"),
                            Description = "Mi Home hỗ trợ rất nhiều thiết bị nhà thông minh như: camera, máy lọc không khí, quạt điện, robot hút bụi … được kết nối và điều khiển qua ứng dụng.\r\n\r\nTùy vào từng hoàn cảnh mà người dùng có thể dễ dàng điều khiển tự động như: đèn sáng, quạt quay, robot hoạt động … Điều này giúp bạn không cần phải tự động phải ở gần thiết bị mới làm được.\r\n\r\nHiểu được điều này, Xiaomi đã cho ra mắt bộ thiết bị nhà thông mình Xiaomi Smart Home Security Kit 5 Trong 1. Sản phẩm bao gồm:\r\n\r\nBộ điều khiển trung tâm;\r\nCảm biến chuyển động;\r\nCảm biến đóng / mở cửa;\r\nChuông cửa;\r\nỔ cắm thông minh.",
                            PackageName = "Bộ Thiết Bị Nhà Thông Minh Xiaomi Smart Home Security Kit 5 Trong 1",
                            Price = 1490000m
                        },
                        new
                        {
                            Id = new Guid("7793e328-7b7a-4f1f-9117-896dadcf6420"),
                            Description = "",
                            PackageName = "Gói Sản Phẩm Nhà thông Minh BKAV",
                            Price = 105000000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isDeposit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PackageId")
                        .IsUnique()
                        .HasFilter("[PackageId] IS NOT NULL");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SurveyId")
                        .IsUnique()
                        .HasFilter("[SurveyId] IS NOT NULL");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TotalConstract")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acdbcba2-c11e-474a-9084-74b264ed734f"),
                            RoleName = "Owner"
                        },
                        new
                        {
                            Id = new Guid("0eb86888-54f4-4ec1-8b7f-6e4efcf0f421"),
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("2fa5da1a-8f00-4c40-81de-c6dad46509a6"),
                            RoleName = "Teller"
                        },
                        new
                        {
                            Id = new Guid("a1c91713-12bb-4cc6-bedd-32c35c0fd939"),
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isLeader")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e17c5e1-2cfa-4018-b840-8ec9753ac14a")
                        },
                        new
                        {
                            Id = new Guid("8856a279-7edb-4b31-bd1e-1828fcd39201")
                        },
                        new
                        {
                            Id = new Guid("abac982f-2a54-4a79-8166-ec6ab33b7118")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RecommendPacket")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("RoomArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Tellers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c798e61-414b-468e-b9fb-79b16dc6b643")
                        });
                });

            modelBuilder.Entity("DevicePackage", b =>
                {
                    b.HasOne("Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Acceptance", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithOne("Acceptance")
                        .HasForeignKey("Domain.Entities.Acceptance", "ContractId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Acceptances")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Contract");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Chat", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Chats")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Teller", "Teller")
                        .WithMany("Chats")
                        .HasForeignKey("TellerId");

                    b.Navigation("Customer");

                    b.Navigation("Teller");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Revenue", "Revenue")
                        .WithMany("Contracts")
                        .HasForeignKey("RevenueId");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Contracts")
                        .HasForeignKey("StaffId");

                    b.HasOne("Domain.Entities.Teller", "Teller")
                        .WithMany("Contracts")
                        .HasForeignKey("TellerId");

                    b.Navigation("Customer");

                    b.Navigation("Revenue");

                    b.Navigation("Staff");

                    b.Navigation("Teller");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Devices")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Devices")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Devices")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Manufacturer");

                    b.Navigation("Order");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany("Images")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.Image", "PackageId");

                    b.Navigation("Device");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Manufacturer")
                        .HasForeignKey("Domain.Entities.Manufacturer", "PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Device", "Device")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithOne("OrderDetail")
                        .HasForeignKey("Domain.Entities.OrderDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Owner")
                        .HasForeignKey("Domain.Entities.Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Packages")
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.Entities.Feedback", "Feedback")
                        .WithMany("Packages")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Packages")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("Packages")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Contract");

                    b.Navigation("Feedback");

                    b.Navigation("Owner");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Contract");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Policy", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Policies")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Domain.Entities.Package", "Package")
                        .WithOne("Policy")
                        .HasForeignKey("Domain.Entities.Policy", "PackageId");

                    b.Navigation("Owner");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Promotions")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithOne("Request")
                        .HasForeignKey("Domain.Entities.Request", "SurveyId");

                    b.Navigation("Customer");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.HasOne("Domain.Entities.Owner", "Owner")
                        .WithMany("Revenues")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entities.Staff", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("Surveys")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Teller")
                        .HasForeignKey("Domain.Entities.Teller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Account");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("Teller")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Acceptance")
                        .IsRequired();

                    b.Navigation("Packages");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Acceptances");

                    b.Navigation("Chats");

                    b.Navigation("Contracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Domain.Entities.Manufacturer", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("OrderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Owner", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Packages");

                    b.Navigation("Policies");

                    b.Navigation("Promotions");

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("Domain.Entities.Package", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Manufacturer")
                        .IsRequired();

                    b.Navigation("Policy")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Domain.Entities.Revenue", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Orders");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Teller", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
